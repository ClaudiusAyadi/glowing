@use "sass:list";
@use "sass:string";
@use "../abstracts/functions" as *;

/* "space-" Spacing Classes */
@for $i from 1 through length($suffix) {
	$step: list.nth($suffix, $i);
	.space-#{$step} {
		gap: var(--space-#{$step});
	}
}

/* "p{side}-" Padding Classes */
@for $i from 1 through length($suffix) {
	$step: list.nth($suffix, $i);
	$pad: "pt", "pr", "pb", "pl", "px", "py";

	@for $i from 1 through length($pad) {
		$item: list.nth($pad, $i);
		$firstLetter: string.slice($item, 1, 1);
		$secondLetter: string.slice($item, 2, 2);

		$property: if($firstLetter == "p", "padding", "");
		$side: if(
			$secondLetter == "t",
			"top",
			if(
				$secondLetter == "r",
				"right",
				if(
					$secondLetter == "b",
					"bottom",
					if(
						$secondLetter == "l",
						"left",
						if($secondLetter == "x", "inline", if($secondLetter == "y", "block", ""))
					)
				)
			)
		);

		@if ($property != "" and $side != "") {
			.#{$item}-#{$step} {
				#{$property}-#{$side}: var(--space-#{$step});
			}
		}
	}
}

/* "m{side}-" Margin Classes */
@for $i from 1 through length($suffix) {
	$step: list.nth($suffix, $i);
	$mag: "mt", "mr", "mb", "ml", "mx", "my";

	@for $i from 1 through length($mag) {
		$item: list.nth($mag, $i);
		$firstLetter: string.slice($item, 1, 1);
		$secondLetter: string.slice($item, 2, 2);

		$property: if($firstLetter == "m", "margin", "");
		$side: if(
			$secondLetter == "t",
			"top",
			if(
				$secondLetter == "r",
				"right",
				if(
					$secondLetter == "b",
					"bottom",
					if(
						$secondLetter == "l",
						"left",
						if($secondLetter == "x", "inline", if($secondLetter == "y", "block", ""))
					)
				)
			)
		);

		@if ($property != "" and $side != "") {
			.#{$item}-#{$step} {
				#{$property}-#{$side}: var(--space-#{$step});
			}
		}
	}
}
